// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum UserStatus {
  Active
  Inactive
  Pending //waiting for email verification
  Banned
}

enum PostStatus {
  Public
  Draft
  Private
  FriendOnly
}

enum FriendStatus {
  Pending
  Accept
  Block
}

model Users {
  id            String      @id @default(uuid()) @map("_id")
  firstName     String
  surname       String
  email         String      @unique
  password      String
  username      String?
  status        UserStatus  @default(Pending)
  verifyCode    String?
  profilePicUrl String?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  Posts         Posts[]
  likePosts     LikePosts[]

  FriendsRecieved Friends[] @relation("RequestingUser")
  FriendsRequest  Friends[] @relation("ReceivingUser")
}

model Posts {
  id      String     @id @default(uuid()) @map("_id")
  content String
  status  PostStatus @default(Public)

  authorId String
  author   Users  @relation(fields: [authorId], references: [id], onDelete: Cascade)

  images PostImage[]
  like   LikePosts[]

  hostPostId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PostImage {
  id        String   @id @default(uuid()) @map("_id")
  url       String
  fileId    String
  order     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  posts     Posts    @relation(fields: [postsId], references: [id], onDelete: Cascade)
  postsId   String
}

model LikePosts {
  id     String @id @default(uuid()) @map("_id")
  post   Posts  @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId String

  user   Users  @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Friends {
  id           String       @id @default(uuid()) @map("_id")
  requestId    String
  recievedId   String
  userRequest  Users        @relation("RequestingUser", fields: [requestId], references: [id], onDelete: Cascade)
  userRecieved Users        @relation("ReceivingUser", fields: [recievedId], references: [id], onDelete: Cascade)
  status       FriendStatus @default(Pending)
}
