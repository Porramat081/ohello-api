// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum UserStatus {
  Active
  Inactive
  Pending //waiting for email verification
  Banned
}

enum PostStatus {
  Public
  Draft
  Private
  FriendOnly
}

enum FriendStatus {
  Pending
  Accept
  Block
}

model Users {
  id              String       @id @default(uuid()) @map("_id")
  firstName       String
  surname         String
  email           String       @unique
  password        String
  username        String?
  bio             String?
  status          UserStatus   @default(Pending)
  verifyCode      String?
  profilePicUrl   UserPicture? @relation("userProfilePic", fields: [userProfilePicId], references: [id], onDelete: Cascade)
  profileCoverUrl UserPicture? @relation("userCoverPic", fields: [userCoverPicId], references: [id], onDelete: Cascade)
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  Posts           Posts[]
  likePosts       LikePosts[]

  FriendsRecieved Friends[] @relation("ReceivingUser")
  FriendsRequest  Friends[] @relation("RequestingUser")

  StartChatRoom ChatRoom[] @relation("UserMember1")

  DestChatRoom     ChatRoom[] @relation("UserMember2")
  Message          Message[]
  userProfilePicId String?
  userCoverPicId   String?
}

model Posts {
  id      String     @id @default(uuid()) @map("_id")
  content String
  status  PostStatus @default(Public)

  authorId String
  author   Users  @relation(fields: [authorId], references: [id], onDelete: Cascade)

  images PostImage[]
  like   LikePosts[]

  hostPostId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PostImage {
  id        String   @id @default(uuid()) @map("_id")
  url       String
  fileId    String
  order     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  posts     Posts    @relation(fields: [postsId], references: [id], onDelete: Cascade)
  postsId   String
}

model LikePosts {
  id     String @id @default(uuid()) @map("_id")
  post   Posts  @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId String

  user   Users  @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Friends {
  id           String       @id @default(uuid()) @map("_id")
  requestId    String
  recievedId   String
  userRequest  Users        @relation("RequestingUser", fields: [requestId], references: [id], onDelete: Cascade)
  userRecieved Users        @relation("ReceivingUser", fields: [recievedId], references: [id], onDelete: Cascade)
  status       FriendStatus @default(Pending)
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
}

model ChatRoom {
  id          String   @id @default(uuid()) @map("_id")
  memberId1   String
  memberId2   String
  userMember1 Users    @relation("UserMember1", fields: [memberId1], references: [id], onDelete: Cascade)
  userMember2 Users    @relation("UserMember2", fields: [memberId2], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  Message Message[]
}

model Message {
  id          String   @id @default(uuid()) @map("_id")
  chatRoomId  String
  content     String
  ChatRoomOwn ChatRoom @relation(fields: [chatRoomId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  writerId    String
  WriterUser  Users    @relation(fields: [writerId], references: [id], onDelete: Cascade)
}

model UserPicture {
  id         String   @id @default(uuid()) @map("_id")
  FileId     String   @unique
  pictureUrl String   @unique
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  userCoverPic   Users[] @relation("userCoverPic")
  userProfilePic Users[] @relation("userProfilePic")
}
